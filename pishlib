#
# pishlib
#
## Library of helper functions for shell scripts on the Raspberry Pi
## range of computers.
##
## Add '. /path/to/pishlib' to your shell script to use the functions.
##
## Released under the MIT licence
## Copyright (c) 2020 Russell Armstrong
#

#######################
##                   ##
## Memmory functions ##
##                   ##
#######################

pl-sys_mem() {   

    case $1 in

      "")
        # Get system mem Size. Return int as Mb
        echo $(__pl-mem_total)
        ;;

      eq)
        # System mem = $2? Return bool.
        [[ $(__pl-mem_total) -eq $2 ]]
        ;;

      lt)
        # System mem < to $2? Return bool.
        [[ $(__pl-mem_total) -lt $2 ]]
        ;;

      gt)
        # System mem > to $2? Return bool.
        [[ $(__pl-mem_total) -gt $2 ]]
        ;;

      is256m)
        [[ $(__pl-mem_total) -lt 256 ]]
      ;;

      is512m)
        [[ $(__pl-mem_total) -lt 512 ]] && [[ $(__pl-mem_total) -gt 256 ]]
      ;;

      is1g)
        [[ $(__pl-mem_total) -lt 1024 ]] && [[ $(__pl-mem_total) -gt 512 ]]
      ;;

      is2g)
        [[ $(__pl-mem_total) -lt 2048 ]] && [[ $(__pl-mem_total) -gt 1024 ]]
      ;;


      is4g)
        [[ $(__pl-mem_total) -lt 4096 ]] && [[ $(__pl-mem_total) -gt 2048 ]]
      ;;

      is8g)
        [[ $(__pl-mem_total) -lt 8192 ]] && [[ $(__pl-mem_total) -gt 4096 ]]
      ;;

      ramdisk)
        __pl-mem_rdisk
        return $?
      ;;

      zswap)
        __pl-mem_zswap
        return $?
      ;;

      swap)
        __pl-mem_swap
        return $?
      ;;

      *)
        return 1
        ;;

    esac
}

__pl-mem_total () {
    mem=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
    echo $(( $mem / 1024 ))
}

__pl-mem_rdisk() {
  return
}

__pl-mem_zswap() {
  return
}

__pl-mem_swap() {
  return
}



###################
##               ##
## GPU functions ##
##               ##
###################

pl-gpu_mem() {

  case $1 in

    "")
      # TODO: test.
      __pl-gpu_get_mem
      ;;

    default)
      # needs testing
      pl-gpu_mem=$(__pl-gpu_get_default_mem)
      __pl-gpu_set $pl-gpu_mem
      ;;

    max)
      if [[ $(pl-sys_mem is256m) ]]; then
          pl-gpu_mem=128
      elif [[ $(pl-sys_mem is512m) ]]; then
          pl-gpu_mem=384
      elif [[ $(pl-mem_greater 512) ]]; then
          pl-gpu_mem=512
      fi
      __pl-gpu_set $pl-gpu_mem
      ;;

    *)
      if [[ $1 -lt 16 ]] | [[ $1 -gt 1024 ]]; then
        # setting less than 16 may prevent pi from booting
        # setting more than 1024 doesn't make sense
        return 1
      elif [[ $1 -gt 15 ]] & [[ $1 -lt 1025 ]]; then
        __pl-gpu_set $1
        return $?
      else
        return 1
      fi
      ;;
  esac
}

__pl-gpu_get_mem() {
  # TODO: Test.

  # extract setting from /boot/config.txt, may be ""
  pl-gpu_mem=$(grep gpu_mem /boot/config.txt | sed 's/[^0-9]*//g')

  if [[ -f "/usr/bin/vcgencmd" ]]; then
    # best option if we have vcgencmd
    pl-gpu_mem=$(vcgencmd get_mem gpu | sed 's/[^0-9]*//g')
  elif [[ $pl-gpu_mem=="" ]]; then
    # if not defined in /boot/config.txt then default allocation depending on model
    pl-gpu_mem=$(__pl-gpu_get_default_mem)
  fi
  echo $(pl-gpu_mem)
}

__pl-gpu_get_default_mem() {
  if [[ $(pl-model is1) ]] | [[ $(pl-model isZero) ]]; then
      pl-gpu_mem=64
  else
      pl-gpu_mem=76
  fi
  echo $(pl-gpu_mem)
}

__pl-gpu_set() {
  # TODO: this needs testing.
  # TODO: Put in logic to incase gpu_mem doesn't exist in config.txt 
    sed -ri "s/gpu_mem=[0-9]+/gpu_mem=$1/g" /boot/config.txt
}

#####################
##                 ##
## Model functions ##
##                 ##
#####################

# model=`cat /sys/firmware/devicetree/base/model`

pl-model (){

  case $1 in

    "")
      # Return model string
      return 0
      ;;

    is1)
      # Return bool if model=Pi1
      return 0
      ;;

    is2)
      # Return bool if model=Pi2
      return 0
      ;;

    is3)
      # Return bool if model=Pi3
      return 0
      ;;

    is4)
      # Return bool if model=Pi4
      return 0
      ;;

    isZero)
      # Return bool if model=PiZero
      return 0
      ;;

    isCompute)
      # Return bool if model=PiCompute
      return 0
      ;;

  esac
}
