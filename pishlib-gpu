source pishlib-model
source pishlib-mem

BOOT_CONF_FILE="/boot/config.txt"
VCGENCMD="/usr/bin/vcgencmd"

pl_gpu_mem() {

  case $1 in

    "")
      __pl_gpu_mem_get
      ;;

    default)
      __pl_gpu_mem_set "$(__pl_gpu_mem_get_default)"
      ;;

    max)
      __pl_gpu_mem_set "$(__pl_gpu_mem_get_max)"
      ;;

    set)
      __pl_gpu_mem_set "$2"
      ;;

    *)
      return 1
      ;;
  esac
}
 
__pl_gpu_mem_get() {
  # extract gpu_mem int from config; it may return "".
  local __gpu_mem="$(sed 's/[^0-9]*//g' $BOOT_CONF_FILE)"

  if [[ -f $VCGENCMD ]]; then
    # vcgencmd will give most accurate result.
    local __gpu_mem=$("$VCGENCMD" get_mem gpu | sed 's/[^0-9]*//g')
  elif [[ $__gpu_mem -eq "" ]]; then
    # If not defined in $BOOT_CONF_FILE and vcgencmd isn't available gpu_mem must be default
    local __gpu_mem=$(__pl_gpu_mem_get_default)
  fi
  
  echo "$__gpu_mem"
}

__pl_gpu_mem_get_default() {
  # TODO: this needs testing
  # TODO: refactor this to use `pl_mem lt` and `pl_mem gt`
  if [[ "$(pl-model is1)" -eq 0 ]] || [[ "$(pl-model isZero)" -eq 0 ]]; then
      local __gpu_mem=64
  else
      local __gpu_mem=76
  fi
  echo $"__gpu_mem"
}

__pl_gpu_mem_get_max() {
  # TODO: refactor to use new `pl_mem is` function
  if [[ "$(pl_mem is256m)" ]]; then
    __gpu_mem=128
  elif [[ "$(pl_mem is512m)" ]]; then
    __gpu_mem=384
  elif [[ "$(pl_mem gt 512)" ]]; then
    __gpu_mem=512
  fi
  echo $"__gpu_mem"
}

__pl_gpu_setting_is_sane() {
  # less than 16 may prevent pi from booting
  # more than 1024 doesn't make sense
  if [[ "$1" -lt 16 ]] || [[ "$1" -gt 1024 ]]; then
    echo 0
  fi
}

__pl_gpu_mem_set() {
  if [[ $(__pl_gpu_mem_setting_in_conf) ]]; then
    __pl_gpu_mem_setting_delete
  fi
  __pl_gpu_mem_setting_append $1
}

__pl_gpu_mem_setting_in_conf() {
  [[ $(grep -E ".*gpu_mem" $BOOT_CONF_FILE) ]]
}

__pl_gpu_mem_setting_delete() {
  sed -Eri "s/^.*gpu_mem=([0-9])*$/d/g" $BOOT_CONF_FILE
}

__pl_gpu_mem_setting_append() {
  echo "gpu_mem=$1" >> $BOOT_CONF_FILE
}