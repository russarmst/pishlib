source pishlib-mem
source ./libs/boot_config/boot_config

BOOT_CONF_FILE="/boot/config.txt"
VCGENCMD="/usr/bin/vcgencmd"

pl_gpu_mem() {

  case $1 in

    get)
      __pl_gpu_mem_get
      ;;

    default)
      __pl_gpu_mem_set "$(__pl_gpu_mem_get_default)"
      ;;

    max)
      __pl_gpu_mem_set "$(__pl_gpu_mem_get_max)"
      ;;

    set)
      __pl_gpu_mem_set "$2"
      ;;

    *)
      return 1
      ;;
  esac
}
 
__pl_gpu_mem_get() {
  # If gpu_mmem not defined $BOOT_CONF_FILE __gpu_mem will be "".
  local __gpu_mem="$(boot_config get_property_value gpu_mem)"
  
  if [[ -f $VCGENCMD ]]; then
    # vcgencmd will give most accurate result but may not be available on all distros.
    local __gpu_mem=$("$VCGENCMD" get_mem gpu | sed 's/[^0-9]*//g')
  elif [[ $__gpu_mem -eq "" ]]; then
    # gpu_mem is set to default according to RAM size.
    local __gpu_mem=$(__pl_gpu_mem_get_default)
  fi
  
  echo "$__gpu_mem"
}

__pl_gpu_mem_get_default() {
  # TODO: refactor this to use `pl_mem lt` and `pl_mem gt`
  if [[ "$(pl-mem lt 1024)"]]; then
      local __gpu_mem=64
  else
      local __gpu_mem=76
  fi
  echo "$__gpu_mem"
}

__pl_gpu_mem_get_max() {
  if [[ "$(pl_mem is 256)" ]]; then
    __gpu_mem=128
  elif [[ "$(pl_mem is 512)" ]]; then
    __gpu_mem=384
  elif [[ "$(pl_mem gt 512)" ]]; then
    __gpu_mem=512
  fi
  echo "$__gpu_mem"
}

__pl_gpu_setting_is_sane() {
  # less than 16 may prevent pi from booting
  # more than 512 doesn't make sense
  if [[ "$1" -lt 16 ]] || [[ "$1" -gt 512 ]]; then
    echo 0
  fi
}

__pl_gpu_mem_set() {
  local gpu_mem_size=$1
  if [[ $(boot_config contains gpu_mem) ]]; then
    boot_config change_property_value gpu_mem "$gpu_mem_size"
  else
    boot_config append_property gpu_mem "$gpu_mem_size"
  fi
}