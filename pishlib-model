#!/usr/bin/env bash

CPU_INFO_FILE="/proc/cpuinfo"

pl_model() {

  case $1 in

    "")
      printf "Manufacturer: %s\n" $(__pl_model_attribute manufacturer)
      printf "Memory: %s\n" $(__pl_model_attribute memory)
      printf "Processor: %s\n" $(__pl_model_attribute processor)
      printf "Revision: %s\n" $(__pl_model_attribute revision)
      printf "Type: %s\n" $(__pl_model_attribute type)
      printf "Revision Code: %s\n" $(__pl_model_revision_code)
      ;;

    manufacturer|memory|processor|revision|type)
      echo "$(__pl_model_attribute $1)"
      ;;

    summary)
      # string in format of "<manufacturer> <memory> <processor> <revision> <type>"
      echo "$(__pl_model_summary)"
      else
        return 1
      fi
      ;;

    is3)
      rev=$(__pl_model_rev_code)
      gen=$(__pl_model_generation $(rev)) 
      if [[ $(gen)=3 ]]; then
        return 0
      else
        return 1
      fi
      ;;

    is4)
      if [[ $(__pl_model_generation $(__pl_model_rev_code)) -eq 4 ]]; then
        return 0
      else
        return 1
      fi
      ;;

    isZero)
      # Return bool if model=PiZero
      return 0
      ;;

    isCompute)
      # Return bool if model=PiCompute
      return 0
      ;;

  esac
}


__pl_model_revision_code() {
  # For old RPis, "100" is prepended to the revision code if overvolted (waranty void)
  # Strip "100" if necessary to return just the revision code.
  echo $(awk "/^Revision/ {sub("^100", "", $3); print $3}" "$CPU_INFO_FILE")
}

__pl_model_generation() {
  echo $(awk -v rev_code="$1" '$1==rev_code {print $2}' ./pi_model_data.txt)
}

__pl-model_model() {
  echo $(awk '{print $5}' /sys/firmware/devicetree/base/model)
}

__pl-model_revision() {
  echo $(awk '{print $7}' /sys/firmware/devicetree/base/model)
}