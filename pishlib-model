#!/usr/bin/env bash

CPU_INFO_FILE="/proc/cpuinfo"

pl_model() {

  case $1 in

    "")
      printf "Manufacturer: %s\n" $(__pl_model_attribute manufacturer)
      printf "Memory: %s\n" $(__pl_model_attribute memory)
      printf "Processor: %s\n" $(__pl_model_attribute processor)
      printf "Revision: %s\n" $(__pl_model_attribute revision)
      printf "Type: %s\n" $(__pl_model_attribute type)
      printf "Revision Code: %s\n" $(__pl_model_revision_code)
      ;;

    manufacturer|memory|processor|revision|type)
      echo "$(__pl_model_attribute $1)"
      ;;

    summary)
      # string in format of "<manufacturer> <memory> <processor> <revision> <type>"
      echo "$(__pl_model_summary)"
      else
        return 1
      fi
      ;;

    is3)
      rev=$(__pl_model_rev_code)
      gen=$(__pl_model_generation $(rev)) 
      if [[ $(gen)=3 ]]; then
        return 0
      else
        return 1
      fi
      ;;

    is4)
      if [[ $(__pl_model_generation $(__pl_model_rev_code)) -eq 4 ]]; then
        return 0
      else
        return 1
      fi
      ;;

    isZero)
      # Return bool if model=PiZero
      return 0
      ;;

    isCompute)
      # Return bool if model=PiCompute
      return 0
      ;;

  esac
}

__pl_model_attribute() {
  local attribute=$1
  local rev_code="$(__pl_model_revision_code)"
  if [ $(__pl_model_rev_code_is_new "$rev_code") ]; then
    local model_attribute="$(__pl_model_new_rev_code_decode $attribute $rev_code)"
  else
    local model_attribute="$(__pl_model_old_rev_code_decode $attribute $rev_code)"
  fi
  echo $model_attribute
}

__pl_model_revision_code() {
  # For old RPis, "100" is prepended to the revision code if overvolted (waranty void)
  # Strip "100" if necessary to return just the revision code.
  echo $(awk "/^Revision/ {sub("^100", "", $3); print $3}" "$CPU_INFO_FILE")
}

__pl_model_rev_code_is_new() {
  rev_code=$1
  if [ ${#rev_code} = 6 ]; then
    return 0
  else
    return 1
  fi
}

__pl_model_old_rev_code_decode() {
  attribute=$1
  rev_code=$2
  declare -A model_attribute_lookup_lists=(
    [0002]="Egoman 256 BCM2835 1 1B"
    [0003]="Egoman 256 BCM2835 1 1B"
    [0004]="Sony_UK 256 BCM2835 2 1B"
    [0005]="Qisda 256 BCM2835 2 1B"
    [0006]="Egoman 256 BCM2835 2 1B"
    [0007]="Egoman 256 BCM2835 2 1A"
    [0008]="Sony_UK 256 BCM2835 2 1A"
    [0009]="Qisda 256 BCM2835 2 1A"
    [000d]="Egoman 512 BCM2835 2 1B"
    [000e]="Sony_UK 512 BCM2835 2 1B"
    [000f]="Egoman 512 BCM2835 2 1B"
    [0010]="Sony_UK 512 BCM2835 1.2 1B+"
    [0011]="Sony_UK 512 BCM2835 1 CM1"
    [0012]="Sony_UK 512 BCM2835 1.1 1A+"
    [0013]="Embest 512 BCM2835 1.2 1B+"
    [0014]="Embest 512 BCM2835 1 CM1"
    [0015]="Embest 256 BCM2835 1.1 1A+"
  )
  declare -A model_attribute_lookup_index=([manufacturer]=1 [memory]=2 [processor]=3 [revision]=4 [type]=5)
  local index=${model_attribute_lookup_index[attribute]}
  declare -a model_attribute_lookup_array=(${model_attribute_lookup_lists[$index]})
  echo $(model_attribute_lookup_array[index])
}

__pl_model_new_rev_code_decode() {
  declare -A model_attribute_lookup_lists=(
    [manufacturer]="Sony_UK Egoman Embest Sony_Japan Embest Stadium undefined undefined undefined undefined undefined undefined undefined undefined undefined undefined"
    [memory]="256 512 1024 2048 4096 8192 undefined undefined undefined undefined undefined undefined undefined undefined undefined undefined"
    [processor]="BCM2835 BCM2836 BCM2837 BCM2711 undefined undefined undefined undefined undefined undefined undefined undefined undefined undefined undefined undefined"
    [revision]="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"
    [type]="1A 1B 1A+ 1B+ 2B Alpha CM1 unknown 3B Zero CM3 unknown Zero_W 3B+ 3A+ internal_use_only CM3+ 4B undefined undefined undefined"
  )
  declare -A revision_code_model_attribute_start_bit=( [manufacturer]=16 [memory]=10 [processor]=1 [revision]=0 [type]=4)
  declare -A revision_code_model_attribute_bit_mask=( [manufacturer]=0xf [memory]=0x7 [processor]=0xf [revision]=0xf [type]=0xff )
  local attribute=$1
  local rev_code=$2
  local start_bit=${revision_code_model_attribute_start_bit[$attribute]}
  local bit_mask=${revision_code_model_attribute_bit_mask[$attribute]}
  # isolate the lookup list for the attribute and convert it into an array
  declare -a model_attribute_lookup_array=(${model_attribute_lookup_lists[$attribute]})
  local lookup_array_index=$((0x"$rev_code" >> "$start_bit" & "$bit_mask"))
  echo ${model_attribute_lookup_array[lookup_array_index]}
}

__pl_model_summary() {
  manu=$(__pl_model_attribute manufacturer)
  mem=$(__pl_model_attribute memory)
  proc=$(__pl_model_attribute processor)
  rev=$(__pl_model_attribute revision)
  typ=$(__pl_model_attribute type)
  echo "$manu" "$mem" "$proc" "$rev" "$typ"

}